// Given an array of integers nums and an integer target, 
// return indices of the two numbers such that they add up to target.
// You may assume that each input would have exactly one solution, 
// and you may not use the same element twice.
// You can return the answer in any order.

//Solution

import java.util.Arrays;
import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {
     HashMap<String, Integer> number = new HashMap<String, Integer>();
        
        for (int i = 0; i < nums.length; i++) {
            number.put(Integer.toString(nums[i]), i);
        }
        
        for (int i = 0, place = i; i < nums.length; i++) {
            int distance = target - nums[i];
            
            if (number.containsKey(Integer.toString(distance))) {
                place = number.get(Integer.toString(distance));
                if (i != place) {
                    return new int[]{i, place};
                }
            }
        }
        return new int[]{0,0};
    }
}

// Given an input string s, reverse the order of the words.

// A word is defined as a sequence of non-space characters. 
// The words in s will be separated by at least one space.

// Return a string of the words in reverse order concatenated by a single space.

class Solution {
    public String reverseWords(String s) {
        String[] temp = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = temp.length - 1; i >= 0; i --) {
            if(!temp[i].equals("")) {
                sb.append(temp[i]).append(" ");
            }
        }
        return sb.length() == 0 ? "" : sb.substring(0, sb.length() - 1);
                                        
    }
}

// You have n  tiles, where each tile has one letter tiles[i] printed on it.
// Return the number of possible non-empty sequences of letters 
// you can make using the letters printed on those tiles.


class Solution {
    public int numTilePossibilities(String tiles) {
        if (tiles == null || tiles.length() == 0) {
            return 0;
        }
        
        HashSet<String> hs = new HashSet<>();
        char [] hold = tiles.toCharArray();
        boolean [] used = new boolean[tiles.length()];
        dfs(hold, used, "", hs);
        return hs.size();
    }
    
    private void dfs(char [] hold, boolean[] used, String item, HashSet<String> hs) {
        for (int i = 0; i < used.length; i++) {
            if(!used[i]){
                used[i] = true;
                hs.add(item + hold[i]);
                dfs(hold, used, item + hold[i], hs);
                used[i] = false;
            }
        }
    }
}