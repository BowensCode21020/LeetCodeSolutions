// Given an array of integers nums and an integer target, 
// return indices of the two numbers such that they add up to target.
// You may assume that each input would have exactly one solution, 
// and you may not use the same element twice.
// You can return the answer in any order.

//Solution

import java.util.Arrays;
import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {
     HashMap<String, Integer> number = new HashMap<String, Integer>();
        
        for (int i = 0; i < nums.length; i++) {
            number.put(Integer.toString(nums[i]), i);
        }
        
        for (int i = 0, place = i; i < nums.length; i++) {
            int distance = target - nums[i];
            
            if (number.containsKey(Integer.toString(distance))) {
                place = number.get(Integer.toString(distance));
                if (i != place) {
                    return new int[]{i, place};
                }
            }
        }
        return new int[]{0,0};
    }
}

// Given an input string s, reverse the order of the words.

// A word is defined as a sequence of non-space characters. 
// The words in s will be separated by at least one space.

// Return a string of the words in reverse order concatenated by a single space.

class Solution {
    public String reverseWords(String s) {
        String[] temp = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = temp.length - 1; i >= 0; i --) {
            if(!temp[i].equals("")) {
                sb.append(temp[i]).append(" ");
            }
        }
        return sb.length() == 0 ? "" : sb.substring(0, sb.length() - 1);
                                        
    }
}

// You have n  tiles, where each tile has one letter tiles[i] printed on it.
// Return the number of possible non-empty sequences of letters 
// you can make using the letters printed on those tiles.


class Solution {
    public int numTilePossibilities(String tiles) {
        if (tiles == null || tiles.length() == 0) {
            return 0;
        }
        
        HashSet<String> hs = new HashSet<>();
        char [] hold = tiles.toCharArray();
        boolean [] used = new boolean[tiles.length()];
        dfs(hold, used, "", hs);
        return hs.size();
    }
    
    private void dfs(char [] hold, boolean[] used, String item, HashSet<String> hs) {
        for (int i = 0; i < used.length; i++) {
            if(!used[i]){
                used[i] = true;
                hs.add(item + hold[i]);
                dfs(hold, used, item + hold[i], hs);
                used[i] = false;
            }
        }
    }
}

// Given a string s. You should re-order the string using the following algorithm:

// Pick the smallest character from s and append it to the result.
// Pick the smallest character from s which is greater than the last appended 
// character to the result and append it.

// Repeat step 2 until you cannot pick more characters.

// Pick the largest character from s and append it to the result.
// Pick the largest character from s which is smaller than the last 
// appended character to the result and append it.

// Repeat step 5 until you cannot pick more characters.

// Repeat the steps from 1 to 6 until you pick all characters from s.
// In each step, If the smallest or the largest character appears more than once 
// you can choose any occurrence and append it to the result.

// Return the result string after sorting s with this algorithm.

class Solution {
    public String sortString(String s) {
        int[] alphabet = new int[26];
        for (char c : s.toCharArray()) {
            alphabet[c - 'a']++;
        }
        StringBuilder sb = new StringBuilder();
        while(sb.length() != s.length()) {
            for (int i = 0; i < 26; i++) {
                if (alphabet[i] !=0) {
                    sb.append((char) (97 + i));
                    alphabet[i]--;
                }
            }
            for(int j = 25; j >= 0; j--) {
                if(alphabet[j] != 0) {
                    sb.append((char) (97 + j));
                    alphabet[j]--;
                }
            }
            
        }
        return sb.toString();
    }
}

// You are given an m x n integer grid accounts where accounts[i][j] 
// is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. 
// Return the wealth that the richest customer has.

// A customer's wealth is the amount of money they have in all their bank accounts. 
// The richest customer is the customer that has the maximum wealth.

class Solution {
    public int maximumWealth(int[][] accounts) {
        int m = accounts.length;
        if (m==0) {
            return 0;
        }
        int n = accounts[0].length;
        int ans = 0;
        for (int i = 0; i < m; i++) {
            int res = 0;
            for(int j = 0; j < n; j++){
                res += accounts[i][j];
            }
            ans = Math.max(ans, res);
        }
        return ans;
    }
}

// Given an array nums of integers, 
// return how many of them contain an even number of digits.

class Solution {
    
    public boolean isEven (int num) {
         int count = 0;
       while(num != 0) {
           count++;
           num = num /10;
       }
        return count % 2 ==0;
    }
    
    public int findNumbers(int[] nums) {
       int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (isEven(nums[i])) {
                res++;
            }
        }
        return res;
    }
}

// International Morse Code defines a standard encoding where each letter is 
// mapped to a series of dots and dashes, 
// as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

// Now, given a list of words, 
// each word can be written as a concatenation of the Morse code of each letter. 
// For example, "cab" can be written as "-.-..--...", 
// (which is the concatenation "-.-." + ".-" + "-..."). 
// We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.
class Solution {
    
    private final String[] VALUE = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
    public int uniqueMorseRepresentations(String[] words) {
        Set<String> hold = new HashSet();
        for (String temp : words) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < temp.length(); i++) {
                char c = temp.charAt(i);
                sb.append(VALUE[c - 'a']);
            }
            hold.add(sb.toString());
        }
        return hold.size();
    }
}

// Given an 2D board, count how many battleships are in it. 
// The battleships are represented with 'X's, empty slots are represented with '.'s. 
// You may assume the following rules:

// You receive a valid board, made of only battleships or empty slots.

// Battleships can only be placed horizontally or vertically. 
// In other words, they can only be made of the shape 1xN (1 row, N columns) 
// or Nx1 (N rows, 1 column), where N can be of any size.

// At least one horizontal or vertical cell separates between two battleships - 
// there are no adjacent battleships.

class Solution {
    public int countBattleships(char[][] board) {
       
        int count = 0;
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                if (i + 1 < board.length && board[i + 1][j] == 'X' || 
                   j + 1 < board[0].length && board[i][j + 1] == 'X') {
                    continue;
                }
                count++;
            }
            
        }
        return count;
    }
}

// Ugly Number haha

// Write a program to check whether a given number is an ugly number.

// Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.

class Solution {
    
    private static final int[] UGLY = {2, 3, 5};

    public boolean isUgly(int num) {
        if (num == 0) return false;
        if (num == 1) return true;
        
        for (int i = 0; i < UGLY.length; i++) {
            if (num % UGLY[i] == 0) {
                num = num / UGLY[i];
                return isUgly(num);
            }
        }
        return false;
    }
}

// Given two sorted integer arrays nums1 and nums2, 
// merge nums2 into nums1 as one sorted array.

// The number of elements initialized in nums1 and nums2 are m and n respectively. 
// You may assume that nums1 has a size equal to m + n such that it has enough 
// space to hold additional elements from nums2.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if (n == 0) return;
        
        int[] hold = new int[m];
        for (int i = 0; i < m; i++) {
            hold[i] = nums1[i];
        }
        
        int i = 0, j = 0, k = 0;
        while((i < m) || (j < n)) {
            if (i == m){
                nums1[k++] = nums2[j++];
            }
            else if (j == n) {
                nums1[k++] = hold[i++];
            }
            else if (hold[i] <= nums2[j]) {
                nums1[k++] = hold[i++];
            }
            else{
                nums1[k++] = nums2[j++];
            }
        }
    }
}

// There is a biker going on a road trip. 
// The road trip consists of n + 1 points at different altitudes. 
// The biker starts his trip on point 0 with altitude equal 0.

// You are given an integer array gain of length n where gain[i] is the 
// net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). 
// Return the highest altitude of a point.

class Solution {
    public int largestAltitude(int[] gain) {
        int ans = 0;
        int h = 0;
        for (int i = 0; i < gain.length; i++) {
            h += gain[i];
            ans = Math.max(ans, h);
        }
        return ans;
    }
}

// Given a valid (IPv4) IP address, 
// return a defanged version of that IP address.

// A defanged IP address replaces every period "." with "[.]".

 class Solution {
    public String defangIPaddr(String address) {
        String defang = "";
        for(int i = 0; i < address.length(); i++) {
            char c = address.charAt(i);
            if(c == '.') {
                defang += "[.]";
            }
            else {
                defang += c;
            }
        }
        return defang;
    }
}

// Given a string s. You should re-order the string using the following algorithm:

// Pick the smallest character from s and append it to the result.
// Pick the smallest character from s which is greater than the 
// last appended character to the result and append it.
// Repeat step 2 until you cannot pick more characters.

// Pick the largest character from s and append it to the result.
// Pick the largest character from s which is smaller than the last 
// appended character to the result and append it.

// Repeat step 5 until you cannot pick more characters.

// Repeat the steps from 1 to 6 until you pick all characters from s.
// In each step, If the smallest or the largest character appears more than once 
// you can choose any occurrence and append it to the result.

// Return the result string after sorting s with this algorithm.

class Solution {
    public String sortString(String s) {
        int[] alphabet = new int[26];
        for (char c : s.toCharArray()) {
            alphabet[c - 'a']++;
        }
        StringBuilder sb = new StringBuilder();
        while(sb.length() != s.length()) {
            for (int i = 0; i < 26; i++) {
                if (alphabet[i] !=0) {
                    sb.append((char) (97 + i));
                    alphabet[i]--;
                }
            }
            for(int j = 25; j >= 0; j--) {
                if(alphabet[j] != 0) {
                    sb.append((char) (97 + j));
                    alphabet[j]--;
                }
            }
            
        }
        return sb.toString();
    }
}

// Reverse bits of a given 32 bits unsigned integer.

// Note:

// Note that in some languages such as Java, there is no unsigned integer type. 
// In this case, both input and output will be // given as a signed integer type. 
// They should not affect your implementation, as the integer's internal binary 
// representation is the same, whether it is signed or unsigned.

// In Java, the compiler represents the signed integers using 2's complement notation. 
// Therefore, in Example 2 above, the 
// input represents the signed integer -3 and the output represents the signed integer 
// -1073741825.

// Follow up:

// If this function is called many times, how would you optimize it?

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        for (int i = 0; i < 16; i++) {
            n = findBits(n, i, 32 - i - 1);
        }
        return n;
    }
    
    public int findBits(int n, int i, int j) {
        int a = (n >> j) & 1;
        int b = (n >> i) & 1;
        
        if ((a ^ b) != 0) {
            return n ^= (1 << i) | (1 << j);
        }
        
        return n;
    }
}

// Given a string s formed by digits ('0' - '9') and '#' . 
// We want to map s to English lowercase characters as follows:

// Characters ('a' to 'i') are represented by ('1' to '9') respectively.
// Characters ('j' to 'z') are represented by ('10#' to '26#') respectively. 
// Return the string formed after mapping.

// It's guaranteed that a unique mapping will always exist.

class Solution {
    public String freqAlphabets(String s) {
 StringBuilder sb = new StringBuilder();
    int idx = 0;
    int n = s.length();
    while (idx < n) {
      char c = s.charAt(idx);
      int asciiAdd = -1;
      if (idx + 2 < n && s.charAt(idx + 2) == '#') {
        asciiAdd = Integer.parseInt(s.substring(idx, idx + 2));
        idx += 3;
      }
      else {
        asciiAdd = Integer.parseInt(s.substring(idx, idx + 1));
        idx++;
      }
      sb.append((char) (96 + asciiAdd));
    }
    return sb.toString();
    }
}

// Given a signed 32-bit integer x, return x with its digits reversed. 
// If reversing x causes the value to go outside the signed 32-bit integer range 
// [-231, 231 - 1], then return 0.

// Assume the environment does not allow you to store 64-bit integers 
// (signed or unsigned).

class Solution {
    public int reverse(int x) {
        int ans = 0;
        while(x != 0) {
            int r = x % 10;
            if (ans > Integer.MAX_VALUE / 10 || ans < Integer.MIN_VALUE / 10) {
                return 0;
            }
            ans = ans * 10 + r;
            x /= 10;
        }
        return ans;
    }
}

// Given a string s and an integer k.

// Return the maximum number of vowel letters in any substring of s with length k.

// Vowel letters in English are (a, e, i, o, u).

class Solution {
    public boolean isVowelValid(char v) {
        return ( v == 'a' || v == 'e' || v == 'i' || v == 'o' || v =='u');
    }
    
    public int maxVowels(String s, int k) {
        if (s.length() < k) {
            return 0;
        }
        int max = 0, n = s.length(), count = 0;
        for (int i = 0; i < k; i++) {
            if (isVowelValid(s.charAt(i))) {
                count++;
            }
        }
        max = count;
        
        for (int i = k; i < n; i++) {
            if (isVowelValid(s.charAt(i - k))) {
                count--;
            }
            if (isVowelValid(s.charAt(i))) {
                count++;
            }
            max = Math.max(max, count);
        }
        return max;
    }
}

// Given a string, your task is to count how many palindromic substrings in this string.

// The substrings with different start indexes or end indexes are counted as different 
// substrings even they consist of same characters.

class Solution {
    public int countSubstrings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        boolean[][] dp = new boolean[s.length()][s.length()];
        int count = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            for (int j = i; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j) &&
                   (j - i < 2 || dp[i + 1][j - 1])) {
                    dp[i][j] = true;
                    count++;
                }
            }
        }
        return count;
    }
}

// Solve a given equation and return the value of x in the form of string "x=#value". 
// The equation contains only '+', '-' operation, the variable x and its coefficient.

// If there is no solution for the equation, return "No solution".

// If there are infinite solutions for the equation, return "Infinite solutions".

// If there is exactly one solution for the equation, 
// we ensure that the value of x is an integer.

class Solution {
    
    private final static char[] EQUATE = {'+', '-', '='}; 
    
    public String solveEquation(String equation) {
        int x = 0;
        int num = 0;
        int index = equation.indexOf("=");
        for (int i = 0; i < equation.length(); i++) {
            if (equation.charAt(i) == '=') {
                continue;
            }
            int flag1 = i < index ? 1 : -1;
            int prefix = i == 0 ? i : i - 1;
            int flag2 = equation.charAt(prefix) == '-' ? -1 : 1;
            StringBuilder sb = new StringBuilder();
            while (i < equation.length() && equation.charAt(i) != '+'
                    && equation.charAt(i) != '-'
                    && equation.charAt(i) != '=') {
                sb.append(equation.charAt(i));
                i++;
            }
             String tempStr = sb.toString();
        if(tempStr.length() == 0) {
            continue;
        }
        if (tempStr.contains("x")) {
            if (tempStr.replace("x", "").equals("")) {
            tempStr += "1";
            }
            x += flag1 * flag2 * Integer.parseInt(tempStr.replace("x", ""));
        } else {
            num += - flag1 * flag2 * Integer.parseInt(tempStr);
        }
        }
       if (x == 0) {
        return num == 0 ? "Infinite solutions" : "No solution";
    }
    return "x=" + String.valueOf(num / x);
    }
    
}

// Write a program to count the number of days between two dates.

// The two dates are given as strings, 
// their format is YYYY-MM-DD as shown in the examples.

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

class Solution {
    public int daysBetweenDates(String date1, String date2) {
        LocalDate date1Format = LocalDate.parse(date1);
        LocalDate date2Format = LocalDate.parse(date2);
        long noDaysBetween = ChronoUnit.DAYS.between(date1Format, date2Format);
        int iNo = (int) Math.abs(noDaysBetween);
        return iNo;
    }
}

// Given a string s, check if it can be constructed by taking a substring of it
// and appending multiple copies of the substring together.

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();
        for (int i = 1; i < n; i++) {
            if (s.length() % i == 0) {
                if (s.substring(0, s.length() - i).equals(s.substring(i))) {
                    return true;
                }
            }
        }
        return false;
    }
}

// You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

// Given n, find the total number of full staircase rows that can be formed.

// n is a non-negative integer and fits within the range of a 32-bit signed integer.
class Solution {
    public int arrangeCoins(int n) {
        int count = 0;
        int coin = 1;
        while (n >= coin) {
            n-= coin;
            coin++;
            count++;
        }

        return count;
}
}

// Given an integer k, return the minimum number of Fibonacci numbers whose sum is 
// equal to k. The same Fibonacci number can be used multiple times.

// The Fibonacci numbers are defined as:

// F1 = 1
// F2 = 1
// Fn = Fn-1 + Fn-2 for n > 2.
// It is guaranteed that for the given constraints we can always find such 
// Fibonacci numbers that sum up to k.

class Solution {
    public int findMinFibonacciNumbers(int k) {
        int one = 1, two = 1, fibo = 1;
        if (k == 0) {
            return 0;
        }
        while (one + two <= k) {
            fibo = one + two;
            one = two;
            two = fibo;
        }
        
        int count = 1;
        if (two == k) {
            return count;
        } else {
            int result = k - two;
            return 1 + findMinFibonacciNumbers(result);
        }

    }
}

// You are given row x col grid representing a map where grid[i][j] = 1 represents l 
// and grid[i][j] = 0 represents water.

// Grid cells are connected horizontally/vertically (not diagonally). 
// The grid is completely surrounded by water, 
// and there is exactly one island (i.e., one or more connected land cells).

// The island doesn't have "lakes", meaning the water inside isn't connected to the water 
// around the island. 

// One cell is a square with side length 1. 
// The grid is rectangular, width and height don't exceed 100. 
// Determine the perimeter of the island.

 class Solution {
    public int islandPerimeter(int[][] grid) {
        
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for(int j = 0; j <grid[0].length; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                if (i == 0 || grid[i - 1][j] == 0) count++;  
                if (i == grid.length - 1 || grid[i + 1][j] == 0) count++;  
                if (j == 0 || grid[i][j - 1] == 0) count++;  
                if (j == grid[i].length - 1 || grid[i][j + 1] == 0) count++;
            }
            
        }
        return count;
    }
}

// Given a string s of zeros and ones, 
// return the maximum score after splitting the string into two non-empty substrings 
// (i.e. left substring and right substring).

// The score after splitting a string is the number of zeros in the left substring 
// plus the number of ones in the right substring.

class Solution {
    public int maxScore(String s) {
        int miss = 0;
        int hit = 0, res = -1000;
        int n = s.length();
        for (int i =0; i < n; i++) {
            if (s.charAt(i) == '1') {
                hit++;
            } else {
                miss++;
            }
            if (i != n - 1) {
                res = Math.max(res, miss - hit);
            }
        }
         return res + hit;
    }
}

// Given an array nums of 0s and 1s and an integer k, 
// return True if all 1's are at least k places away from each other, 

// otherwise return False.

class Solution {
    public boolean kLengthApart(int[] nums, int k) {
        int d = k + 1;
        for (int n : nums) {
            if (n == 0) {
                d++;
            } else {
                if (d < k) {
                    return false;
                }
                d = 0;
            }
        }
        return true;
    
    }
}

// Assume you are an awesome parent and want to give your children some cookies. 
// But, you should give each child at most one cookie.

// Each child i has a greed factor g[i], which is the minimum size of a cookie 
// that the child will be content with; 

// and each cookie j has a size s[j]. If s[j] >= g[i], 
// we can assign the cookie j to the child i, and the child i will be content. 

// Your goal is to maximize the number of your content children and output the 
// maximum number.

class Solution {
    public int findContentChildren(int[] g, int[] s) {
        for (int i = 0; i < g.length; i++) {
            for (int k = i + 1; k < g.length; k++) {
                int countOne = 0;
                if (g[i] > g[k]) {
                    countOne = g[i];
                    g[i] = g[k];
                    g[k] = countOne;
                }

            }    
        }
        
        for (int j = 0; j < s.length; j++) {
            for(int l = j + 1; l < s.length; l++) {
                int countTwo = 0;
                if (s[j] > s[l]) {
                    countTwo = s[j];
                    s[j] = s[l];
                    s[l] = countTwo;
                }
            }
        }
        
        int pointGreed = 0;
        int pointSize = 0;
        
        while (pointSize < s.length && pointGreed < g.length) {
            if (g[pointGreed] <= s[pointSize]) {
                pointGreed++;
                pointSize++;
            } else {
                pointSize++;
            }
        }
        return pointGreed;
    }
}


// Given integer array nums, return the third maximum number in this array. 
// If the third maximum does not exist, return the maximum number.

class Solution {
    public int thirdMax(int[] nums) {
        Integer max1 = null, max2 = null, max3 = null;
        for (Integer temp : nums) {
            if (temp.equals(max1) || temp.equals(max2) || temp.equals(max3)) {
                continue;
            }
            if (max1 == null || temp > max1) {
                max3 = max2;
                max2 = max1;
                max1 = temp;
            } else if (max2 == null || temp > max2) {
                max3 = max2;
                max2 = temp;
            } else if (max3 == null || temp > max3) {
                max3 = temp;
            }
        }
        return max3 == null ? max1 : max3;
}
}